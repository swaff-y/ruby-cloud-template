{
	"info": {
		"_postman_id": "803360d4-4c46-4617-8284-6b6cd28e9831",
		"name": "prod",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14386217"
	},
	"item": [
		{
			"name": "GET /status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Has a 'success' status\",function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"success\");",
							"});",
							"",
							"pm.test(\"Data status ok\",function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.status).to.eql(\"Ok\");",
							"});",
							"",
							"pm.test(\"Is connecting to the correct database\",function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.database).to.eql(\"cloud_template\");",
							"});",
							"",
							"pm.test(\"Has the correct stage\",function () {",
							"    stage = pm.collectionVariables.get(\"stage\");",
							"    if(stage != 'prod') stage = 'dev';",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.stage).to.eql(stage);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{unique_id}}.{{base}}/{{stage}}/status",
					"protocol": "https",
					"host": [
						"{{unique_id}}",
						"{{base}}"
					],
					"path": [
						"{{stage}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /person",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = null;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Has a 'success' status\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"success\");",
							"});",
							"",
							"pm.test(\"Has an id\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.Id).exists;",
							"});",
							"",
							"if(jsonData.data.Id) {",
							"    pm.collectionVariables.set(\"request_id\", jsonData.data.Id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstname\": \"Tester\",\n  \"lastname\": \"Dude\",\n  \"weight\": 100,\n  \"height\": 165\n}"
				},
				"url": {
					"raw": "https://{{unique_id}}.{{base}}/{{stage}}/person",
					"protocol": "https",
					"host": [
						"{{unique_id}}",
						"{{base}}"
					],
					"path": [
						"{{stage}}",
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /person (Same request)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = null;",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Has a 'fail' status\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"fail\");",
							"});",
							"",
							"pm.test(\"Has a failure message\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.message.fullname).to.eql(\"fullname already exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstname\": \"Tester\",\n  \"lastname\": \"Dude\",\n  \"weight\": 100,\n  \"height\": 165\n}"
				},
				"url": {
					"raw": "https://{{unique_id}}.{{base}}/{{stage}}/person",
					"protocol": "https",
					"host": [
						"{{unique_id}}",
						"{{base}}"
					],
					"path": [
						"{{stage}}",
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /person",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = null",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Has a 'success' status\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"success\");",
							"});",
							"",
							"pm.test(\"Has an id\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.data._id).exists;",
							"});",
							"",
							"pm.test(\"Has a firstname\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.firstname).to.eql(\"Tester\");",
							"});",
							"",
							"pm.test(\"Has a lastname\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.lastname).to.eql(\"Dude\");",
							"});",
							"",
							"pm.test(\"Has a fullname\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.fullname).to.eql(\"Tester Dude\");",
							"});",
							"",
							"pm.test(\"Has a weight\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.weight).to.eql(100);",
							"});",
							"",
							"pm.test(\"Has a height\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.height).to.eql(165);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{unique_id}}.{{base}}/{{stage}}/person/:id",
					"protocol": "https",
					"host": [
						"{{unique_id}}",
						"{{base}}"
					],
					"path": [
						"{{stage}}",
						"person",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{request_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /person",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = null;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Has a 'success' status\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"success\");",
							"});",
							"",
							"pm.test(\"Has an id\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.personId).exists;",
							"});",
							"",
							"pm.test(\"Has a success message\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.updateStatus).to.eql(\"success\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{unique_id}}.{{base}}/{{stage}}/person/:id",
					"protocol": "https",
					"host": [
						"{{unique_id}}",
						"{{base}}"
					],
					"path": [
						"{{stage}}",
						"person",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{request_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /person (Same request)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = null;",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Has a 'fail' status\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"fail\");",
							"});",
							"",
							"pm.test(\"Has a failure message\",function () {",
							"    jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.message).to.eql(\"Error deleting record\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{unique_id}}.{{base}}/{{stage}}/person/:id",
					"protocol": "https",
					"host": [
						"{{unique_id}}",
						"{{base}}"
					],
					"path": [
						"{{stage}}",
						"person",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{request_id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "$KEY",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "unique_id",
			"value": "$UNIQUE_ID",
			"type": "string"
		},
		{
			"key": "base",
			"value": "execute-api.ap-southeast-2.amazonaws.com",
			"type": "string"
		},
		{
			"key": "stage",
			"value": "$STAGE",
			"type": "string"
		},
		{
			"key": "request_id",
			"value": "",
			"type": "string"
		}
	]
}